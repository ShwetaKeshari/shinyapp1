install.packages("shiny")
library 9)"shiny"
library("shiny")
rstudio manipulate
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
library(shiny)
shinyServer(
function(input, output) {
}
)
runApp(shiny)
runApp{shinyUI}
runApp(shinyUI)
runApp(getwd())
server.R
shinyUI(pageWithSidebar(
headerPanel("Illustrating markup"),
sidebarPanel(
h1('Sidebar panel'),
h1('H1 text'),
h2('H2 Text'),
h3('H3 Text'),
h4('H4 Text')
),
mainPanel(
h3('Main Panel text'),
code('some code'),
p('some ordinary text')
)
))
runApp(appDir = getwd())
> library(shiny)
> runExample("01_hello")
> library(shiny)
> runExample("01_hello"
library(shiny)> runExample("01_hello")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
View(myPlot)
View(myPlot)
myPlot
runApp(myPlot)
library(manipulate) manipulate(plot(1:x), x = slider(1,
100))
library(manipulate) manipulate(plot(1:x), x = slider(1,100))
library(manipulate) , manipulate(plot(1:x), x = slider(1,100)),
library(manipulate) manipulate(plot(1:x), x = slider(1,100)),
library(manipulate), manipulate(plot(1:x), x = slider(1,100)),
library(manipulate) manipulate(plot(1:x), x = slider(1,100))
library(manipulate)
manipulate(plot(1:x), x = slider(1,100))
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
galton
n1
n1$
data (galton)
data (galton)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
# Reading the power data file.
power_data <- read.table("C:/DataforExploratory Analysis/household_power_consumption.txt", header=T, sep=";", na.strings="?")
# creating a subset for the data for the two dates we are interested in.
power_data_subset <-power_data[power_data$Date=="1/2/2007" | power_data$Date=="2/2/2007",]
#Combining the time and date
datetime <-strptime(paste(power_data_subset$Date, power_data_subset$Time),"%d/%m/%Y %H:%M:%S")
power_data_subset2 <- cbind(datetime, power_data_subset)
par(mfrow=c(2,2))
#Plot the graph 1
plot(power_data_subset2$datetime,power_data_subset2$Global_active_power, type= "l", ylab= "Global Active Power", xlab=" ")
plot(power_data_subset2$datetime,power_data_subset2$Voltage,type="l", ylab="Voltage", xlab="datetime")
plot(power_data_subset2$datetime,power_data_subset2$Sub_metering_1, type= "l", ylab= "Energy Sub Metering", xlab=" ",col="Black")
lines(power_data_subset2$datetime,power_data_subset2$Sub_metering_2,col="red")
lines(power_data_subset2$datetime,power_data_subset2$Sub_metering_3,col="Blue")
legend("topright",legend= c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col= c("Black","red","blue" ))
plot(power_data_subset2$datetime,power_data_subset2$Global_reactive_power,type="l", ylab="Global_reactive_power", xlab="datetime" )
dev.copy(png, file="plot4.png",width = 480,height=480)
dev.off()
# Reading the power data file.
power_data <- read.table("C:/DataforExploratory Analysis/household_power_consumption.txt", header=T, sep=";", na.strings="?")
# creating a subset for the data for the two dates we are interested in.
power_data_subset <-power_data[power_data$Date=="1/2/2007" | power_data$Date=="2/2/2007",]
#Combining the time and date
datetime <-strptime(paste(power_data_subset$Date, power_data_subset$Time),"%d/%m/%Y %H:%M:%S")
power_data_subset2 <- cbind(datetime, power_data_subset)
#Plot the graph
plot(power_data_subset2$datetime,power_data_subset2$Sub_metering_1, type= "l", ylab= "Energy Sub Metering", xlab=" ",col="Black")
lines(power_data_subset2$datetime,power_data_subset2$Sub_metering_2,col="red")
lines(power_data_subset2$datetime,power_data_subset2$Sub_metering_3,col="Blue")
legend("topright",legend= c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col= c("Black","red","blue" ))
dev.copy(png, file="plot3.png",width = 480,height=480)
dev.off()
#Plot 2.
# Read the dataset
power_data <- read.table("C:/DataforExploratory Analysis/household_power_consumption.txt", header=T, sep=";", na.strings="?")
head(power_data)
# creating a subset for the data for the two dates we are interested in.
power_data_subset <-power_data[power_data$Date=="1/2/2007" | power_data$Date=="2/2/2007",]
#Combining the time and date
datetime <-strptime(paste(power_data_subset$Date, power_data_subset$Time),"%d/%m/%Y %H:%M:%S")
power_data_subset2 <- cbind(datetime, power_data_subset)
#Plot the graph
plot(power_data_subset2$datetime,power_data_subset2$Global_active_power, type= "l", ylab= "Global Active Power (Killowatts)", xlab=" ")
dev.copy(png, file="plot2.png",width = 480,height=480)
dev.off()
#Plot 2.
# Read the dataset
power_data <- read.table("C:/DataforExploratory Analysis/household_power_consumption.txt", header=T, sep=";", na.strings="?")
head(power_data)
# creating a subset for the data for the two dates we are interested in.
power_data_subset <-power_data[power_data$Date=="1/2/2007" | power_data$Date=="2/2/2007",]
#Combining the time and date
datetime <-strptime(paste(power_data_subset$Date, power_data_subset$Time),"%d/%m/%Y %H:%M:%S")
power_data_subset2 <- cbind(datetime, power_data_subset)
#Plot the graph
plot(power_data_subset2$datetime,power_data_subset2$Global_active_power, type= "l", ylab= "Global Active Power (Killowatts)", xlab=" ")
dev.copy(png, file="plot2.png",width = 480,height=480)
dev.off()
#Plot 2.
# Read the dataset
power_data <- read.table("C:/DataforExploratory Analysis/household_power_consumption.txt", header=T, sep=";", na.strings="?")
head(power_data)
# creating a subset for the data for the two dates we are interested in.
power_data_subset <-power_data[power_data$Date=="1/2/2007" | power_data$Date=="2/2/2007",]
#Combining the time and date
datetime <-strptime(paste(power_data_subset$Date, power_data_subset$Time),"%d/%m/%Y %H:%M:%S")
power_data_subset2 <- cbind(datetime, power_data_subset)
#Plot the graph
plot(power_data_subset2$datetime,power_data_subset2$Global_active_power, type= "l", ylab= "Global Active Power (Killowatts)", xlab=" ")
dev.copy(png, file="plot2.png",width = 480,height=480)
dev.off()
dev.copy(png, file="plot1.png",width = 480,height=480)
dev.off()
png( file="plot2.png",width = 480,height=480)
dev.off()
devtools::install_github("twitter/BreakoutDetection")
install.packages("devtools")
devtools::install_github("twitter/BreakoutDetection")
help(breakout)
library(BreakoutDetection)
help(breakout)
library(AnomalyDetection)
help("AnomalyDetectionTs")
shiny::runApp('C:/Shinyapp')
d<-read.table("emission.txt", sep=",", col.names=c(" ","Baltimore","Los"))
getwd()
d<-read.table("emission.txt", sep=",", col.names=c(" ","Baltimore","Los"))
shiny::runApp('C:/Shinyapp')
d<-read.table("C:/Shinyapp/emission.txt", sep=",", col.names=c(" ","Baltimore","Los"))
shiny::runApp('C:/Shinyapp')
WorldPhones
shiny::runApp('C:/Shinyapp')
head(d)
head(d)
read.csv("C:/Shinyapp/emission.txt", sep=",")
as.factor(d$x)
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
if(d$Baltimore){barplot(d$Baltimore,names.arg = d$x)}
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
?where()
shiny::runApp('C:/Shinyapp')
2002
a<-c(1999,2002,2004,2008)
d1<-cbind(a,d)
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
?ggplot()
library(ggplot2)
?ggplot()
d
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
d<-read.table("C:/Shinyapp/emission.txt", sep=",", col.names=c("year","Baltimore","Los"))
ggplot(d,aes(x=year,y=Los))+geom_bar()+geom_point(color="red")
ggplot(d,aes(x=year,y=Los))+geom_bar(color="red")
ggplot(d,aes(x="year",y="Los"))+geom_bar(color="red")
d
d<-read.table("C:/Shinyapp/emission.txt", sep=",")
d
d
d<-read.table("C:/Shinyapp/emission.txt", sep=",")
d
ggplot(d,aes(x=factor(V1),,y=V2))+geom_bar(stats="identity",color="red")
ggplot(d,aes(x=factor(V1),,y=V2))+geom_bar(stat="identity")
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
d<-read.table("C:/Shinyapp/emission.txt", sep=",", col.names=c("year","Baltimore","Los"))
d
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
?barplot
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
d<-read.table("C:/Shinyapp/emission.txt", sep=",", col.names=c("year","Baltimore","Los"))
# Fill in the spot we created for a plot
output$Emissions <- renderPlot({
#ggplot(d,aes(x=factor(year),y=d$region))+geom_bar(stat="identity",color="red")
barplot(d[,input$region],
main=input$region,
ylab="Total Amount of PM2.5 emitted, in tons",
xlab="Year")
axis(1,c(1:4),c(1999,2002,2004,2008))
})
})
shiny::runApp('C:/Shinyapp')
shiny::runApp('C:/Shinyapp')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='shweta', token='102A43BCF7FC126C88087B5385E58300', secret='icW/P3TRL3shsD+g5DQu56B8lPwACJUo8hYMshIR')
library(shinyapps)
shinyapps::deployApp('c:/shinyapp1')
shiny::runApp('C:/shinyapp1')
shiny::runApp('C:/shinyapp1')
shiny::runApp('C:/shinyapp1')
shiny::runApp('C:/shinyapp1')
a<-c(47103.19,26968.79,22939.78,32135.48)
b<-c(3274.180,2453.916,3091.354,1862.282)
d<-data.frame(a,b)
names(d)<-c("Baltimore","Los Angeles")
shiny::runApp('C:/shinyapp1')
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
deployApp()
title: "Documentaion on shiny app"
shiny::runApp('C:/shinyapp1')
library(shinyapps)
shinyapps::deployApp('c:/shinyapp1')
To learn more, see [Interactive Documents](http://rmarkdown.rstudio.com/authoring_shiny.html).
shiny::runApp('C:/shinyapp1')
